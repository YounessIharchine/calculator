{"version":3,"sources":["context/calculatorContext.js","elements/digit.js","elements/operation.js","App.js","elements/screen.js","elements/ac.js","elements/ce.js","elements/point.js","elements/equals.js","index.js"],"names":["CalculatorContext","createContext","Digit","digit","addDigit","useContext","className","onClick","Operation","operation","addOperation","App","useState","value","setValue","didJustPushEqual","setJustPushEqual","operations","emptyScreen","removeLastChar","prevValue","slice","lastChar","length","beforeLastChar","includes","addPoint","some","iteratedOperation","split","calculate","equals","parseFloat","eval","replace","toFixed","toString","Provider","Screen","AC","CE","Point","Equals","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8bdafdda.chunk.js","sourcesContent":["import { createContext } from \"react\";\r\n\r\nconst CalculatorContext = createContext();\r\n\r\nexport default CalculatorContext;\r\n","import { useContext } from \"react\";\r\nimport CalculatorContext from \"../context/calculatorContext\";\r\n\r\nconst Digit = ({ digit }) => {\r\n  const { addDigit } = useContext(CalculatorContext);\r\n\r\n  return (\r\n    <div className=\"button\" onClick={() => addDigit(digit)}>\r\n      {digit}\r\n    </div>\r\n  );\r\n};\r\nexport default Digit;\r\n","import { useContext } from \"react\";\r\nimport CalculatorContext from \"../context/calculatorContext\";\r\n\r\nconst Operation = ({ operation }) => {\r\n  const { addOperation } = useContext(CalculatorContext);\r\n\r\n  return (\r\n    <div className=\"button\" onClick={() => addOperation(operation)}>\r\n      {operation}\r\n    </div>\r\n  );\r\n};\r\nexport default Operation;\r\n","import \"./App.css\";\nimport { useState } from \"react\";\nimport CalculatorContext from \"./context/calculatorContext\";\nimport Screen from \"./elements/screen\";\nimport AC from \"./elements/ac\";\nimport CE from \"./elements/ce\";\nimport Operation from \"./elements/operation\";\nimport Digit from \"./elements/digit\";\nimport Point from \"./elements/point\";\nimport Equals from \"./elements/equals\";\n\nfunction App() {\n  const [value, setValue] = useState(\"0\");\n  const [didJustPushEqual, setJustPushEqual] = useState(false);\n  const operations = [\"+\", \"-\", \"x\", \"/\"];\n\n  const emptyScreen = () => {\n    setValue(\"0\");\n  };\n\n  const removeLastChar = () => {\n    setValue((prevValue) => {\n      const value = prevValue.slice(0, -1);\n\n      if (!value) return \"0\";\n\n      return value;\n    });\n  };\n\n  const addDigit = (digit) => {\n    setValue((prevValue) => {\n      if (didJustPushEqual) {\n        setJustPushEqual(false);\n        return digit;\n      }\n      if (prevValue === \"0\") return digit;\n\n      const lastChar = prevValue[prevValue.length - 1];\n      const beforeLastChar = prevValue[prevValue.length - 2];\n\n      //when a 0 is after an operation\n      if (operations.includes(beforeLastChar) && lastChar === \"0\") {\n        if (digit === \"0\") return prevValue;\n        else return prevValue.slice(0, -1) + digit;\n      }\n\n      return prevValue + digit;\n    });\n  };\n\n  const addPoint = () => {\n    setValue((prevValue) => {\n      const lastChar = prevValue[prevValue.length - 1];\n\n      if (didJustPushEqual) {\n        setJustPushEqual(false);\n      }\n\n      if (lastChar === \"0\") return prevValue + \".\";\n      if (\n        operations.some((iteratedOperation) => iteratedOperation === lastChar)\n      )\n        return prevValue + \"0.\";\n      if (\n        prevValue.split(\".\").length - 1 === 1 &&\n        !operations.some((iteratedOperation) =>\n          prevValue.includes(iteratedOperation)\n        )\n      )\n        return prevValue;\n\n      if (\n        prevValue.split(\".\").length - 1 === 2 &&\n        operations.some((iteratedOperation) =>\n          prevValue.includes(iteratedOperation)\n        )\n      )\n        return prevValue;\n\n      return prevValue + \".\";\n    });\n  };\n\n  const addOperation = (operation) => {\n    const operations = [\"+\", \"-\", \"x\", \"/\"];\n\n    if (didJustPushEqual) {\n      setJustPushEqual(false);\n    }\n\n    setValue((prevValue) => {\n      if (prevValue === \"0\" && operation === \"-\") return operation;\n      if (prevValue === \"-\" && operation === \"+\") return \"0\";\n      if (prevValue === \"0\" || prevValue === \"-\") return prevValue;\n\n      const lastChar = prevValue[prevValue.length - 1];\n\n      if (lastChar === \".\") return prevValue.slice(0, -1) + operation;\n\n      if (\n        operations.some((iteratedOperation) => iteratedOperation === lastChar)\n      )\n        return prevValue.slice(0, -1) + operation;\n\n      if (\n        operations.some((iteratedOperation) =>\n          prevValue.includes(iteratedOperation)\n        )\n      )\n        return calculate(prevValue) + operation;\n\n      return prevValue + operation;\n    });\n  };\n\n  const equals = () => {\n    const operations = [\"+\", \"-\", \"x\", \"/\"];\n\n    setValue((prevValue) => {\n      const lastChar = prevValue[prevValue.length - 1];\n      if (\n        operations.some((iteratedOperation) => iteratedOperation === lastChar)\n      )\n        return prevValue;\n\n      setJustPushEqual(true);\n      return calculate(prevValue);\n    });\n  };\n\n  const calculate = (prevValue) => {\n    return parseFloat(eval(prevValue.replace(\"x\", \"*\")).toFixed(4)).toString();\n  };\n\n  return (\n    <CalculatorContext.Provider\n      value={{\n        emptyScreen,\n        removeLastChar,\n        addDigit,\n        addPoint,\n        addOperation,\n        equals,\n      }}\n    >\n      <div className=\"wrapper\">\n        <Screen value={value} />\n        <AC /> <CE /> <Operation operation=\"/\" />\n        <Digit digit=\"7\" /> <Digit digit=\"8\" /> <Digit digit=\"9\" />\n        <Operation operation=\"x\" />\n        <Digit digit=\"4\" /> <Digit digit=\"5\" /> <Digit digit=\"6\" />\n        <Operation operation=\"-\" />\n        <Digit digit=\"1\" /> <Digit digit=\"2\" /> <Digit digit=\"3\" />\n        <Operation operation=\"+\" />\n        <Digit digit=\"0\" /> <Point />\n        <Equals />\n      </div>\n    </CalculatorContext.Provider>\n  );\n}\n\nexport default App;\n","const Screen = ({ value }) => {\r\n  return (\r\n    <div className=\"screen-wrapper\">\r\n      <div className=\"screen\">{value}</div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Screen;\r\n","import { useContext } from \"react\";\r\nimport CalculatorContext from \"../context/calculatorContext\";\r\n\r\nconst AC = () => {\r\n  const { emptyScreen } = useContext(CalculatorContext);\r\n\r\n  return (\r\n    <div className=\"button ac\" onClick={emptyScreen}>\r\n      AC\r\n    </div>\r\n  );\r\n};\r\nexport default AC;\r\n","import { useContext } from \"react\";\r\nimport CalculatorContext from \"../context/calculatorContext\";\r\n\r\nconst CE = () => {\r\n  const { removeLastChar } = useContext(CalculatorContext);\r\n\r\n  return (\r\n    <div className=\"button\" onClick={removeLastChar}>\r\n      CE\r\n    </div>\r\n  );\r\n};\r\nexport default CE;\r\n","import { useContext } from \"react\";\r\nimport CalculatorContext from \"../context/calculatorContext\";\r\n\r\nconst Point = () => {\r\n  const { addPoint } = useContext(CalculatorContext);\r\n\r\n  return (\r\n    <div className=\"button\" onClick={addPoint}>\r\n      .\r\n    </div>\r\n  );\r\n};\r\nexport default Point;\r\n","import { useContext } from \"react\";\r\nimport CalculatorContext from \"../context/calculatorContext\";\r\n\r\nconst Equals = () => {\r\n  const { equals } = useContext(CalculatorContext);\r\n\r\n  return (\r\n    <div className=\"button equals\" onClick={equals}>\r\n      =\r\n    </div>\r\n  );\r\n};\r\nexport default Equals;\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}